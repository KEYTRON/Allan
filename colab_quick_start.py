#!/usr/bin/env python3
"""
üöÄ Allan Quick Start –¥–ª—è Google Colab
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ Allan —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os
import subprocess
import sys
from pathlib import Path

def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("=" * 60)
    print("üöÄ Allan - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –≤ Google Colab")
    print("=" * 60)

def check_colab():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ Google Colab"""
    try:
        import google.colab
        print("‚úÖ Google Colab –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        return True
    except ImportError:
        print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Google Colab")
        return False

def mount_drive():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive"""
    print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive...")
    try:
        from google.colab import drive
        drive.mount('/content/drive')
        print("‚úÖ Google Drive –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Drive: {e}")
        return False

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    packages = [
        "transformers",
        "datasets", 
        "accelerate",
        "peft",
        "trl",
        "bitsandbytes",
        "psutil",
        "pathlib"
    ]
    
    for package in packages:
        try:
            print(f"  üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            subprocess.run([
                sys.executable, "-m", "pip", "install", "-q", package
            ], check=True, capture_output=True)
            print(f"  ‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")

def setup_project_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    base_path = "/content/drive/MyDrive/ML_Projects/Allan_Model"
    directories = [
        f"{base_path}/datasets/raw",
        f"{base_path}/datasets/processed", 
        f"{base_path}/datasets/cached",
        f"{base_path}/models/base",
        f"{base_path}/models/merged",
        f"{base_path}/models/gguf",
        f"{base_path}/checkpoints",
        f"{base_path}/configs"
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"  üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {directory}: {e}")

def download_allan_files():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ Allan"""
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ Allan...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è Allan
    allan_path = "/content/allan_temp"
    os.makedirs(allan_path, exist_ok=True)
    
    # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    files_to_copy = [
        "allan_dataset_manager.py",
        "allan_train_colab.ipynb", 
        "colab_ru_qlora_gguf.ipynb",
        "allan_dataset_downloader.py",
        "allan_performance_optimizer.py"
    ]
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_dir = Path.cwd()
    for file_name in files_to_copy:
        source = current_dir / file_name
        if source.exists():
            try:
                import shutil
                shutil.copy2(source, f"{allan_path}/{file_name}")
                print(f"  üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_name}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {file_name}: {e}")
        else:
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")
    
    return allan_path

def setup_python_path(allan_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path"""
    print(f"\nüêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path...")
    
    if allan_path not in sys.path:
        sys.path.append(allan_path)
        print(f"  ‚úÖ {allan_path} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Python path")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
    try:
        from allan_dataset_manager import AllanDatasetManager
        print("  ‚úÖ Allan Dataset Manager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_dataset_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Allan Dataset Manager...")
    
    try:
        from allan_dataset_manager import AllanDatasetManager, list_datasets
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = AllanDatasetManager()
        print("  ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        print("  üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã:")
        list_datasets()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("  üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤:")
        manager.monitor_resources()
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_startup_notebook():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ—É—Ç–±—É–∫–∞"""
    print("\nüìì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ—É—Ç–±—É–∫–∞...")
    
    notebook_content = '''{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üöÄ Allan - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –≤ Google Colab\\n",
    "\\n",
    "–≠—Ç–æ—Ç –Ω–æ—É—Ç–±—É–∫ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Allan.\\n",
    "\\n",
    "## üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:\\n",
    "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ —è—á–µ–π–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É\\n",
    "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\\n",
    "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏\\n",
    "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!\\n",
    "\\n",
    "## üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã:\\n",
    "- `allan_train_colab.ipynb` - –±–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ GPT-2\\n",
    "- `colab_ru_qlora_gguf.ipynb` - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å QLoRA\\n",
    "- `allan_dataset_manager.py` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive\\n",
    "from google.colab import drive\\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\\n",
    "!pip install -q transformers datasets accelerate peft trl bitsandbytes psutil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# üöÄ –ò–º–ø–æ—Ä—Ç Allan\\n",
    "import sys\\n",
    "sys.path.append('/content/allan_temp')\\n",
    "\\n",
    "from allan_dataset_manager import AllanDatasetManager, quick_load_dataset, list_datasets\\n",
    "print('‚úÖ Allan —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤\\n",
    "list_datasets()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤\\n",
    "manager = AllanDatasetManager()\\n",
    "manager.monitor_resources()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# üéØ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä)\\n",
    "# dataset = quick_load_dataset('sberquad')\\n",
    "# print(f'–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(dataset)} –ø—Ä–∏–º–µ—Ä–æ–≤')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}'''
    
    try:
        with open("/content/allan_quick_start.ipynb", "w", encoding="utf-8") as f:
            f.write(notebook_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ—É—Ç–±—É–∫: allan_quick_start.ipynb")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ—É—Ç–±—É–∫–∞: {e}")
        return False

def print_next_steps():
    """–ü–µ—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
    print("\n" + "=" * 60)
    print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("=" * 60)
    print("""
1. üìì –û—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫: allan_quick_start.ipynb
2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ —è—á–µ–π–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
3. üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:
   - allan_train_colab.ipynb (–±–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ GPT-2)
   - colab_ru_qlora_gguf.ipynb (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å QLoRA)
4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
5. üß† –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!
6. üíæ –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å Google Drive

üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: COLAB_STARTUP_GUIDE_RU.md
üîß Allan Dataset Manager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!

–£–¥–∞—á–∏ —Å Allan! üöÄ
""")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header()
    
    if not check_colab():
        return
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Drive
    if not mount_drive():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
        return
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    setup_project_structure()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ Allan
    allan_path = download_allan_files()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path
    if not setup_python_path(allan_path):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Allan. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not test_dataset_manager():
        print("‚ùå Allan Dataset Manager –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ—É—Ç–±—É–∫–∞
    create_startup_notebook()
    
    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print_next_steps()

if __name__ == "__main__":
    main()
