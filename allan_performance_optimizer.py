#!/usr/bin/env python3
"""
Allan Performance Optimizer
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Allan –≤ Colab
"""

import os
import gc
import time
import psutil
import subprocess
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta
import warnings

@dataclass
class ResourceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
    timestamp: datetime
    cpu_percent: float
    ram_used_gb: float
    ram_total_gb: float
    ram_percent: float
    disk_used_gb: float
    disk_total_gb: float
    disk_percent: float
    gpu_used_gb: Optional[float] = None
    gpu_total_gb: Optional[float] = None
    gpu_percent: Optional[float] = None
    temperature: Optional[float] = None

class AllanPerformanceOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è Allan"""
    
    def __init__(self):
        self.monitoring_active = False
        self.metrics_history: List[ResourceMetrics] = []
        self.optimization_applied = set()
        
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        self.WARNING_THRESHOLDS = {
            "ram_percent": 85.0,      # > 85% RAM
            "disk_percent": 90.0,     # > 90% –¥–∏—Å–∫–∞
            "gpu_percent": 95.0,      # > 95% GPU
            "cpu_percent": 90.0,      # > 90% CPU
        }
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        self.CRITICAL_THRESHOLDS = {
            "ram_percent": 95.0,
            "disk_percent": 95.0,
            "gpu_percent": 98.0,
        }
    
    def get_current_metrics(self) -> ResourceMetrics:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        # CPU –∏ RAM
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage("/content")
        
        # GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        gpu_used_gb = gpu_total_gb = gpu_percent = None
        try:
            import torch
            if torch.cuda.is_available():
                gpu_props = torch.cuda.get_device_properties(0)
                gpu_total_gb = gpu_props.total_memory / (1024**3)
                gpu_used_gb = torch.cuda.memory_allocated(0) / (1024**3)
                gpu_percent = (gpu_used_gb / gpu_total_gb) * 100
        except:
            pass
        
        return ResourceMetrics(
            timestamp=datetime.now(),
            cpu_percent=cpu_percent,
            ram_used_gb=memory.used / (1024**3),
            ram_total_gb=memory.total / (1024**3),
            ram_percent=memory.percent,
            disk_used_gb=disk.used / (1024**3),
            disk_total_gb=disk.total / (1024**3),
            disk_percent=(disk.used / disk.total) * 100,
            gpu_used_gb=gpu_used_gb,
            gpu_total_gb=gpu_total_gb,
            gpu_percent=gpu_percent
        )
    
    def print_current_status(self):
        """–ü–µ—á–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
        metrics = self.get_current_metrics()
        
        print("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:")
        print("=" * 50)
        
        # CPU
        cpu_icon = "üî•" if metrics.cpu_percent > 80 else "‚ö°" if metrics.cpu_percent > 50 else "üíö"
        print(f"  {cpu_icon} CPU: {metrics.cpu_percent:.1f}%")
        
        # RAM
        ram_icon = "üî¥" if metrics.ram_percent > 90 else "üü°" if metrics.ram_percent > 70 else "üíö"
        print(f"  {ram_icon} RAM: {metrics.ram_percent:.1f}% ({metrics.ram_used_gb:.1f}/{metrics.ram_total_gb:.1f} –ì–ë)")
        
        # –î–∏—Å–∫
        disk_icon = "üî¥" if metrics.disk_percent > 90 else "üü°" if metrics.disk_percent > 70 else "üíö"
        print(f"  {disk_icon} –î–∏—Å–∫: {metrics.disk_percent:.1f}% ({metrics.disk_used_gb:.1f}/{metrics.disk_total_gb:.1f} –ì–ë)")
        
        # GPU
        if metrics.gpu_percent is not None:
            gpu_icon = "üî¥" if metrics.gpu_percent > 90 else "üü°" if metrics.gpu_percent > 70 else "üíö"
            print(f"  {gpu_icon} GPU: {metrics.gpu_percent:.1f}% ({metrics.gpu_used_gb:.1f}/{metrics.gpu_total_gb:.1f} –ì–ë)")
        else:
            print("  ‚ö†Ô∏è  GPU: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings_list = self.check_resource_warnings(metrics)
        if warnings_list:
            print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in warnings_list:
                print(f"    ‚Ä¢ {warning}")
        
        print()
    
    def check_resource_warnings(self, metrics: ResourceMetrics) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤"""
        warnings_list = []
        
        if metrics.ram_percent > self.WARNING_THRESHOLDS["ram_percent"]:
            warnings_list.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {metrics.ram_percent:.1f}%")
        
        if metrics.disk_percent > self.WARNING_THRESHOLDS["disk_percent"]:
            warnings_list.append(f"–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {metrics.disk_percent:.1f}%")
        
        if metrics.cpu_percent > self.WARNING_THRESHOLDS["cpu_percent"]:
            warnings_list.append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {metrics.cpu_percent:.1f}%")
        
        if metrics.gpu_percent and metrics.gpu_percent > self.WARNING_THRESHOLDS["gpu_percent"]:
            warnings_list.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU: {metrics.gpu_percent:.1f}%")
        
        return warnings_list
    
    def optimize_memory(self, aggressive: bool = False) -> Dict[str, bool]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üßπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏...")
        results = {}
        
        # –û—á–∏—Å—Ç–∫–∞ Python garbage collector
        print("  üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ Python GC...")
        collected = gc.collect()
        results["gc_cleanup"] = True
        print(f"    –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {collected}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ PyTorch
        try:
            import torch
            if torch.cuda.is_available():
                print("  üéÆ –û—á–∏—Å—Ç–∫–∞ GPU –∫—ç—à–∞...")
                torch.cuda.empty_cache()
                torch.cuda.synchronize()
                results["gpu_cache_cleanup"] = True
                print("    GPU –∫—ç—à –æ—á–∏—â–µ–Ω")
        except Exception as e:
            results["gpu_cache_cleanup"] = False
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ GPU: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Hugging Face (–µ—Å–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)
        if aggressive:
            print("  ü§ó –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Hugging Face...")
            try:
                hf_cache_dir = os.environ.get("HF_HOME", "~/.cache/huggingface")
                temp_files = []
                
                # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                for root, dirs, files in os.walk(os.path.expanduser(hf_cache_dir)):
                    for file in files:
                        if file.startswith("tmp") or file.endswith(".tmp"):
                            temp_files.append(os.path.join(root, file))
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                for temp_file in temp_files:
                    try:
                        os.remove(temp_file)
                    except:
                        pass
                
                results["hf_cache_cleanup"] = True
                print(f"    –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(temp_files)}")
                
            except Exception as e:
                results["hf_cache_cleanup"] = False
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ HF –∫—ç—à–∞: {e}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è)
        if aggressive:
            print("  üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
            # –≠—Ç–æ –æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
            import sys
            module = sys.modules[__name__]
            for var_name in dir(module):
                if not var_name.startswith('_') and var_name not in ['gc', 'torch', 'os', 'psutil']:
                    try:
                        delattr(module, var_name)
                    except:
                        pass
            results["variable_cleanup"] = True
        
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return results
    
    def optimize_disk_space(self) -> Dict[str, bool]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        print("üíæ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
        results = {}
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        print("  üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        temp_dirs = ["/tmp", "/content/allan_cache/temp", "/content/.cache"]
        total_cleaned = 0
        
        for temp_dir in temp_dirs:
            if os.path.exists(temp_dir):
                try:
                    for root, dirs, files in os.walk(temp_dir):
                        for file in files:
                            file_path = os.path.join(root, file)
                            try:
                                file_size = os.path.getsize(file_path)
                                os.remove(file_path)
                                total_cleaned += file_size
                            except:
                                pass
                except:
                    pass
        
        results["temp_cleanup"] = True
        print(f"    –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {total_cleaned / (1024*1024):.1f} –ú–ë")
        
        # –û—á–∏—Å—Ç–∫–∞ pip –∫—ç—à–∞
        print("  üì¶ –û—á–∏—Å—Ç–∫–∞ pip –∫—ç—à–∞...")
        try:
            subprocess.run(["pip", "cache", "purge"], 
                         capture_output=True, check=False)
            results["pip_cache_cleanup"] = True
            print("    Pip –∫—ç—à –æ—á–∏—â–µ–Ω")
        except:
            results["pip_cache_cleanup"] = False
            print("    ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ pip –∫—ç—à–∞")
        
        # –û—á–∏—Å—Ç–∫–∞ apt –∫—ç—à–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        print("  üîß –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞...")
        try:
            subprocess.run(["apt", "clean"], 
                         capture_output=True, check=False)
            results["apt_cache_cleanup"] = True
            print("    –°–∏—Å—Ç–µ–º–Ω—ã–π –∫—ç—à –æ—á–∏—â–µ–Ω")
        except:
            results["apt_cache_cleanup"] = False
        
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return results
    
    def optimize_for_training(self) -> Dict[str, bool]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Allan...")
        print("=" * 50)
        
        results = {}
        
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PyTorch
        os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "max_split_size_mb:128"
        os.environ["CUDA_LAUNCH_BLOCKING"] = "0"  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ CUDA –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Transformers
        os.environ["TRANSFORMERS_NO_ADVISORY_WARNINGS"] = "1"
        os.environ["TOKENIZERS_PARALLELISM"] = "true"
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è datasets
        os.environ["HF_DATASETS_IN_MEMORY_MAX_SIZE"] = "0"  # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–∞–º—è—Ç—å
        
        results["env_optimization"] = True
        print("  ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ warnings
        print("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π...")
        warnings.filterwarnings("ignore", category=UserWarning)
        warnings.filterwarnings("ignore", category=FutureWarning)
        results["warnings_optimization"] = True
        print("  ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
        memory_results = self.optimize_memory(aggressive=False)
        results.update(memory_results)
        
        # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            import torch
            if torch.cuda.is_available():
                print("üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU...")
                
                # –í–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
                torch.backends.cudnn.benchmark = True
                torch.backends.cudnn.enabled = True
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–º—è—Ç–∏ GPU
                torch.cuda.empty_cache()
                
                results["gpu_optimization"] = True
                print("  ‚úÖ GPU –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except:
            results["gpu_optimization"] = False
            print("  ‚ùå GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.print_training_recommendations()
        
        print("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return results
    
    def print_training_recommendations(self):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        metrics = self.get_current_metrics()
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
        print("-" * 40)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ batch size
        if metrics.gpu_total_gb:
            if metrics.gpu_total_gb >= 15:
                batch_size = "16-32"
                print(f"  üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch size: {batch_size} (GPU: {metrics.gpu_total_gb:.1f} –ì–ë)")
            elif metrics.gpu_total_gb >= 12:
                batch_size = "8-16"
                print(f"  üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch size: {batch_size} (GPU: {metrics.gpu_total_gb:.1f} –ì–ë)")
            else:
                batch_size = "4-8"
                print(f"  üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch size: {batch_size} (GPU: {metrics.gpu_total_gb:.1f} –ì–ë)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é
        print(f"  üìà Gradient accumulation steps: 2-4 (–¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –±–æ–ª—å—à–µ–≥–æ batch size)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ precision
        if metrics.gpu_total_gb and metrics.gpu_total_gb >= 15:
            print(f"  üéõÔ∏è  Mixed precision: fp16 –∏–ª–∏ bf16 (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏)")
        else:
            print(f"  üéõÔ∏è  Mixed precision: fp16 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ checkpoint
        print(f"  üíæ Gradient checkpointing: –í–∫–ª—é—á–∏—Ç—å (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
        print(f"  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∫–∞–∂–¥—ã–µ 100 —à–∞–≥–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º
        available_space = metrics.disk_total_gb - metrics.disk_used_gb
        if available_space < 10:
            print(f"  ‚ö†Ô∏è  –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ç–æ–∫–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")
        else:
            print(f"  üíæ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞: –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    def monitor_training(self, duration_minutes: int = 60, check_interval: int = 30):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è"""
        print(f"üëÅÔ∏è  –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç...")
        print(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫—É–Ω–¥")
        
        self.monitoring_active = True
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        try:
            while datetime.now() < end_time and self.monitoring_active:
                metrics = self.get_current_metrics()
                self.metrics_history.append(metrics)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤
                critical_issues = self.check_critical_thresholds(metrics)
                if critical_issues:
                    print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ {metrics.timestamp.strftime('%H:%M:%S')}:")
                    for issue in critical_issues:
                        print(f"    ‚Ä¢ {issue}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
                    self.auto_cleanup_on_critical()
                
                # –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                warnings_list = self.check_resource_warnings(metrics)
                if warnings_list:
                    print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ {metrics.timestamp.strftime('%H:%M:%S')}:")
                    for warning in warnings_list:
                        print(f"    ‚Ä¢ {warning}")
                
                time.sleep(check_interval)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        self.monitoring_active = False
        print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ {len(self.metrics_history)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
    
    def check_critical_thresholds(self, metrics: ResourceMetrics) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤"""
        critical_issues = []
        
        if metrics.ram_percent > self.CRITICAL_THRESHOLDS["ram_percent"]:
            critical_issues.append(f"–ö–†–ò–¢–ò–ß–ù–û: RAM {metrics.ram_percent:.1f}% > {self.CRITICAL_THRESHOLDS['ram_percent']}%")
        
        if metrics.disk_percent > self.CRITICAL_THRESHOLDS["disk_percent"]:
            critical_issues.append(f"–ö–†–ò–¢–ò–ß–ù–û: –î–∏—Å–∫ {metrics.disk_percent:.1f}% > {self.CRITICAL_THRESHOLDS['disk_percent']}%")
        
        if metrics.gpu_percent and metrics.gpu_percent > self.CRITICAL_THRESHOLDS["gpu_percent"]:
            critical_issues.append(f"–ö–†–ò–¢–ò–ß–ù–û: GPU {metrics.gpu_percent:.1f}% > {self.CRITICAL_THRESHOLDS['gpu_percent']}%")
        
        return critical_issues
    
    def auto_cleanup_on_critical(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        print("üö® –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...")
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        self.optimize_memory(aggressive=True)
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–∞
        self.optimize_disk_space()
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def generate_performance_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.metrics_history:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–Ω–∞—á–∞–ª–∞."
        
        report = []
        report.append("üìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ALLAN")
        report.append("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_measurements = len(self.metrics_history)
        duration = self.metrics_history[-1].timestamp - self.metrics_history[0].timestamp
        
        report.append(f"üïí –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {duration}")
        report.append(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {total_measurements}")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
        ram_values = [m.ram_percent for m in self.metrics_history]
        cpu_values = [m.cpu_percent for m in self.metrics_history]
        disk_values = [m.disk_percent for m in self.metrics_history]
        
        report.append("üíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –†–ï–°–£–†–°–û–í:")
        report.append(f"  RAM: –º–∏–Ω {min(ram_values):.1f}% | –º–∞–∫—Å {max(ram_values):.1f}% | —Å—Ä–µ–¥ {sum(ram_values)/len(ram_values):.1f}%")
        report.append(f"  CPU: –º–∏–Ω {min(cpu_values):.1f}% | –º–∞–∫—Å {max(cpu_values):.1f}% | —Å—Ä–µ–¥ {sum(cpu_values)/len(cpu_values):.1f}%")
        report.append(f"  –î–∏—Å–∫: –º–∏–Ω {min(disk_values):.1f}% | –º–∞–∫—Å {max(disk_values):.1f}% | —Å—Ä–µ–¥ {sum(disk_values)/len(disk_values):.1f}%")
        
        # GPU —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        gpu_values = [m.gpu_percent for m in self.metrics_history if m.gpu_percent is not None]
        if gpu_values:
            report.append(f"  GPU: –º–∏–Ω {min(gpu_values):.1f}% | –º–∞–∫—Å {max(gpu_values):.1f}% | —Å—Ä–µ–¥ {sum(gpu_values)/len(gpu_values):.1f}%")
        
        report.append("")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        warning_count = sum(1 for m in self.metrics_history if self.check_resource_warnings(m))
        critical_count = sum(1 for m in self.metrics_history if self.check_critical_thresholds(m))
        
        report.append("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ò –ü–†–û–ë–õ–ï–ú–´:")
        report.append(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}/{total_measurements} ({warning_count/total_measurements*100:.1f}%)")
        report.append(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {critical_count}/{total_measurements} ({critical_count/total_measurements*100:.1f}%)")
        
        return "\n".join(report)
    
    def save_metrics_to_drive(self, drive_path: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ Google Drive"""
        if not self.metrics_history:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        try:
            import json
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = {
                "project": "Allan Model",
                "monitoring_session": {
                    "start_time": self.metrics_history[0].timestamp.isoformat(),
                    "end_time": self.metrics_history[-1].timestamp.isoformat(),
                    "total_measurements": len(self.metrics_history)
                },
                "metrics": []
            }
            
            for metric in self.metrics_history:
                data["metrics"].append({
                    "timestamp": metric.timestamp.isoformat(),
                    "cpu_percent": metric.cpu_percent,
                    "ram_percent": metric.ram_percent,
                    "ram_used_gb": metric.ram_used_gb,
                    "disk_percent": metric.disk_percent,
                    "gpu_percent": metric.gpu_percent,
                    "gpu_used_gb": metric.gpu_used_gb
                })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            filename = f"allan_performance_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            filepath = os.path.join(drive_path, filename)
            
            with open(filepath, 'w') as f:
                json.dump(data, f, indent=2)
            
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return False


def optimize_allan_for_training():
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Allan"""
    optimizer = AllanPerformanceOptimizer()
    return optimizer.optimize_for_training()


def monitor_allan_training(duration_minutes: int = 60):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è Allan"""
    optimizer = AllanPerformanceOptimizer()
    optimizer.monitor_training(duration_minutes)
    return optimizer.generate_performance_report()


def cleanup_allan_resources():
    """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Allan"""
    optimizer = AllanPerformanceOptimizer()
    memory_results = optimizer.optimize_memory(aggressive=True)
    disk_results = optimizer.optimize_disk_space()
    return {**memory_results, **disk_results}


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    optimizer = AllanPerformanceOptimizer()
    
    print("üî• Allan Performance Optimizer - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    optimizer.print_current_status()
    
    # –î–µ–º–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
    optimizer.optimize_for_training()