#!/usr/bin/env python3
"""
Allan Model - Google Colab Setup Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã Colab –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Allan
"""

import os
import sys
import time
import shutil
import subprocess
from pathlib import Path
from typing import Optional, Dict, List

class AllanColabSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Colab —Å—Ä–µ–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Allan"""
    
    def __init__(self):
        self.drive_path = "/content/drive"
        self.project_path = "/content/drive/MyDrive/ML_Projects/Allan_Model"
        self.local_cache = "/content/allan_cache"
        
    def mount_drive(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive"""
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive...")
            from google.colab import drive
            drive.mount(self.drive_path, force_remount=True)
            
            if os.path.exists(self.drive_path):
                print("‚úÖ Google Drive —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Drive")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Drive: {e}")
            return False
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è Allan...")
        
        packages = [
            "transformers[torch]>=4.35.0",
            "datasets>=2.14.0", 
            "tokenizers>=0.14.0",
            "torch>=2.0.0",
            "accelerate>=0.24.0",
            "evaluate>=0.4.0",
            "scikit-learn>=1.3.0",
            "pymorphy2[fast]>=0.9.1",  # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            "razdel>=0.5.0",           # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ
            "sentencepiece>=0.1.99",   # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
            "wandb>=0.16.0",           # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            "tensorboard>=2.14.0",     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            "matplotlib>=3.7.0",
            "seaborn>=0.12.0",
            "tqdm>=4.65.0",
            "psutil>=5.9.0",           # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
            "gpustat>=1.1.0",          # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU
        ]
        
        try:
            for package in packages:
                print(f"  üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
                subprocess.run([
                    sys.executable, "-m", "pip", "install", "-q", package
                ], check=True, capture_output=True)
            
            print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            return False
    
    def create_project_structure(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Google Drive"""
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        directories = [
            self.project_path,
            f"{self.project_path}/datasets",
            f"{self.project_path}/datasets/raw",
            f"{self.project_path}/datasets/processed", 
            f"{self.project_path}/datasets/cached",
            f"{self.project_path}/models",
            f"{self.project_path}/models/checkpoints",
            f"{self.project_path}/models/final",
            f"{self.project_path}/models/tokenizers",
            f"{self.project_path}/logs",
            f"{self.project_path}/logs/tensorboard",
            f"{self.project_path}/logs/wandb",
            f"{self.project_path}/configs",
            f"{self.project_path}/scripts",
            f"{self.project_path}/notebooks",
            f"{self.project_path}/results",
            f"{self.project_path}/cache",
        ]
        
        try:
            for directory in directories:
                os.makedirs(directory, exist_ok=True)
                print(f"  üìÇ {directory}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
            os.makedirs(self.local_cache, exist_ok=True)
            
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False
    
    def setup_environment(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        try:
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Hugging Face
            os.environ["HF_HOME"] = f"{self.project_path}/cache/huggingface"
            os.environ["TRANSFORMERS_CACHE"] = f"{self.project_path}/cache/transformers"
            os.environ["HF_DATASETS_CACHE"] = f"{self.project_path}/cache/datasets"
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è PyTorch
            os.environ["TORCH_HOME"] = f"{self.project_path}/cache/torch"
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Allan
            os.environ["ALLAN_PROJECT_PATH"] = self.project_path
            os.environ["ALLAN_CACHE_PATH"] = self.local_cache
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à-–ø–∞–ø–æ–∫
            cache_dirs = [
                f"{self.project_path}/cache/huggingface",
                f"{self.project_path}/cache/transformers", 
                f"{self.project_path}/cache/datasets",
                f"{self.project_path}/cache/torch",
            ]
            
            for cache_dir in cache_dirs:
                os.makedirs(cache_dir, exist_ok=True)
            
            print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def verify_setup(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        results = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Drive
        results["drive_mounted"] = os.path.exists(self.drive_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        results["project_structure"] = os.path.exists(self.project_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            import torch
            import transformers
            import datasets
            results["libraries"] = True
        except ImportError:
            results["libraries"] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
        try:
            import torch
            results["gpu_available"] = torch.cuda.is_available()
            if results["gpu_available"]:
                gpu_name = torch.cuda.get_device_name(0)
                print(f"  üéÆ GPU: {gpu_name}")
        except:
            results["gpu_available"] = False
        
        # –û—Ç—á–µ—Ç
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for check, status in results.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {check}: {status}")
        
        return results
    
    def get_system_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
        
        info = {}
        
        try:
            import psutil
            import torch
            
            # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info["cpu_count"] = psutil.cpu_count()
            info["cpu_percent"] = psutil.cpu_percent(interval=1)
            
            # RAM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
            memory = psutil.virtual_memory()
            info["ram_total_gb"] = round(memory.total / (1024**3), 2)
            info["ram_available_gb"] = round(memory.available / (1024**3), 2)
            info["ram_used_percent"] = memory.percent
            
            # –î–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            disk = psutil.disk_usage("/content")
            info["disk_total_gb"] = round(disk.total / (1024**3), 2)
            info["disk_free_gb"] = round(disk.free / (1024**3), 2)
            info["disk_used_percent"] = round((disk.used / disk.total) * 100, 2)
            
            # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if torch.cuda.is_available():
                info["gpu_name"] = torch.cuda.get_device_name(0)
                info["gpu_memory_gb"] = round(torch.cuda.get_device_properties(0).total_memory / (1024**3), 2)
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            print(f"  üñ•Ô∏è  CPU: {info['cpu_count']} cores ({info['cpu_percent']}% –∑–∞–≥—Ä—É–∑–∫–∞)")
            print(f"  üß† RAM: {info['ram_available_gb']}/{info['ram_total_gb']} GB –¥–æ—Å—Ç—É–ø–Ω–æ ({info['ram_used_percent']}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)")
            print(f"  üíæ –î–∏—Å–∫: {info['disk_free_gb']}/{info['disk_total_gb']} GB —Å–≤–æ–±–æ–¥–Ω–æ ({info['disk_used_percent']}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)")
            
            if "gpu_name" in info:
                print(f"  üéÆ GPU: {info['gpu_name']} ({info['gpu_memory_gb']} GB)")
            else:
                print("  ‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            
        return info
    
    def setup_allan_colab(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã –¥–ª—è Allan"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Allan Colab Environment...")
        print("=" * 50)
        
        steps = [
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive", self.mount_drive),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫", self.install_dependencies), 
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞", self.create_project_structure),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.setup_environment),
        ]
        
        success_count = 0
        
        for step_name, step_function in steps:
            print(f"\nüîÑ {step_name}...")
            if step_function():
                success_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
        
        print(f"\n{'='*50}")
        
        if success_count == len(steps):
            print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.verify_setup()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            self.get_system_info()
            
            print(f"\nüìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {self.project_path}")
            print(f"üíæ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à: {self.local_cache}")
            print("\nüî• Allan –≥–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é!")
            
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ ({success_count}/{len(steps)} —É—Å–ø–µ—à–Ω–æ)")
            return False


def setup_allan():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Allan –≤ Colab"""
    setup = AllanColabSetup()
    return setup.setup_allan_colab()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
    setup_allan()